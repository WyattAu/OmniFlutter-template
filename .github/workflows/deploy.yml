name: Flutter CI/CD Pipeline

on:
  push:
    branches: [main, dev]
    tags: ["v*.*.*"]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:
    inputs:
      skip-security-scan:
        description: "Skip OWASP Security Scan?"
        required: false
        default: true
        type: boolean
      skip-tests:
        description: "Skip Unit Tests?"
        required: false
        default: true
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: "3.32.8"
  JAVA_VERSION: "17"
  OWASP_VERSION: "8.4.0"
  MIN_COVERAGE_THRESHOLD: 80
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      pubspec-hash: ${{ steps.pubspec-hash.outputs.hash }}
      repo-slug: ${{ steps.repo-info.outputs.slug }}
      test-os: ${{ steps.test-os.outputs.os_json }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract Repository Info
        id: repo-info
        run: |
          REPO_SLUG=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]' | tr '/' '-')
          echo "slug=${REPO_SLUG}" >> $GITHUB_OUTPUT

      - name: Generate Pubspec Hash
        id: pubspec-hash
        run: |
          if [ -f "pubspec.lock" ]; then
            echo "hash=$(sha256sum pubspec.lock | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          else
            echo "hash=pubspec-$(date +%s)" >> $GITHUB_OUTPUT
          fi

      - name: Determine Test OSes
        id: test-os
        run: |
          os_json="[]"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            os_json='["ubuntu-latest","macos-latest","windows-latest"]'
          elif [ "${{ github.event_name }}" = "push" ]; then
            if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/dev" ]]; then
              os_json='["ubuntu-latest","macos-latest"]'
            elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
              os_json='["ubuntu-latest","macos-latest","windows-latest"]'
            fi
          fi
          echo "os_json=${os_json}" >> $GITHUB_OUTPUT

  # analyze:
  #   name: Code Analysis
  #   needs: setup
  #   uses: ./.github/workflows/reusable-analyze.yml
  #   with:
  #     flutter-version: "3.32.8"
  #     pubspec-hash: ${{ needs.setup.outputs.pubspec-hash }}

  # security:
  #   name: Security Scan
  #   needs: setup
  #   if: ${{ github.event_name != 'workflow_dispatch' || !github.event.inputs.skip-security-scan }}
  #   uses: ./.github/workflows/reusable-security.yml
  #   with:
  #     java-version: "17"
  #     owasp-version: "8.4.0"
  #     skip-scan: ${{ github.event.inputs.skip-security-scan || false }}

  # test:
  #   name: Unit Tests
  #   needs: setup
  #   if: ${{ github.event_name != 'workflow_dispatch' || !github.event.inputs.skip-tests }}
  #   strategy:
  #     matrix:
  #       os: ${{ fromJson(needs.setup.outputs.test-os) }}
  #     fail-fast: false
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Flutter
  #       uses: flutter-actions/setup-flutter@v4
  #       with:
  #         version: "3.32.8"
  #         cache: true
  #         cache-key: flutter-test-${{ matrix.os }}-${{ needs.setup.outputs.pubspec-hash }}
  #
  #     - name: Get Dependencies
  #       run: flutter pub get
  #
  #     - name: Run Tests with Coverage
  #       if: ${{ github.event_name != 'workflow_dispatch' || !github.event.inputs.skip-tests }}
  #       run: |
  #         flutter test \
  #           --coverage \
  #           --test-randomize-ordering-seed=random \
  #           --concurrency=4
  #
  #     - name: Upload Coverage Reports
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: test-coverage-${{ matrix.os }}
  #         path: |
  #           coverage/
  #           test-reports/
  #         if-no-files-found: ignore
  #         compression-level: 6

  # Web Builds - only on main branch
  build-web:
    name: Build Web Apps
    needs: [setup] # Removed analyze, security, test dependencies
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true))
    strategy:
      matrix:
        platform: [web]
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # https://github.com/flutter-actions/setup-flutter
      - name: Setup Flutter
        uses: flutter-actions/setup-flutter@v4
        with:
          version: "3.32.8"
          cache: true
          cache-key: flutter-test-${{ matrix.os }}-${{ needs.setup.outputs.pubspec-hash }}

      - name: Create .env file
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env

      - name: Get Dependencies
        run: flutter pub get

      - name: Build Application
        run: |
            flutter build web \
            --release \
            --no-source-maps \
            --base-href="/" \
            -O 4 \


#          BASE_HREF="/OmniFlutter-template/"
#              
#          # Check if this is a manual deployment to custom domain
#          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ "${{ github.event.inputs.deployment-target }}" == "custom-domain" ]]; then
#            BASE_HREF="/"
#          fi
#              
#          # Check if there's a custom domain secret set
#          if [[ "${{ secrets.CUSTOM_DOMAIN_DEPLOY }}" == "true" ]]; then
#            BASE_HREF="/"
#          fi

#          flutter build web \
#          --release \
#          --no-source-maps \
#          --base-href="$BASE_HREF" \
#          -O 4 \
        # wasm doesnt seem to work
        #          --wasm

        env:
          FLUTTER_ROOT: ${{ env.FLUTTER_ROOT }}
          PUB_CACHE: ${{ env.PUB_CACHE }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build-${{ needs.setup.outputs.repo-slug }}-${{ github.sha }}-${{ matrix.os }}
          path: build/web/
          if-no-files-found: warn
          compression-level: 6
          retention-days: 30

      # Prepare for GitHub Pages deployment
      - name: Add .nojekyll file
        run: touch build/web/.nojekyll

      - name: Upload artifact for GitHub Pages
        if: matrix.os == 'ubuntu-latest' # Only one job uploads to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build/web

  # Deploy to GitHub Pages
  deploy:
    name: Deploy to GitHub Pages
    needs: build-web
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true))
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Native Builds - only on version tags
  build-native:
    name: Build Native Apps
    needs: [setup] # Removed analyze, security, test dependencies
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    strategy:
      matrix:
        include:
          - platform: android
            os: ubuntu-latest
            build-cmd: "flutter build apk --split-per-abi --release"
          - platform: ios
            os: macos-latest
            build-cmd: "flutter build ios --release --no-codesign"
          - platform: windows
            os: windows-latest
            build-cmd: "flutter build windows --release"
          - platform: linux
            os: ubuntu-latest
            build-cmd: "flutter build linux --release"
          - platform: macos
            os: macos-latest
            build-cmd: "flutter build macos --release"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # https://github.com/flutter-actions/setup-flutter
      - name: Setup Flutter
        uses: flutter-actions/setup-flutter@v4
        with:
          version: "3.32.8"
          cache: true
          cache-key: flutter-test-${{ matrix.os }}-${{ needs.setup.outputs.pubspec-hash }}

      - name: Setup Build Dependencies
        if: matrix.platform == 'android'
        run: |
          echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager "ndk;25.1.8937393" --channel=3

      - name: Create .env file
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env

      - name: Get Dependencies
        run: flutter pub get

      - name: Build Application
        run: ${{ matrix.build-cmd }}
        env:
          FLUTTER_ROOT: ${{ env.FLUTTER_ROOT }}
          PUB_CACHE: ${{ env.PUB_CACHE }}

      - name: Package Build Artifacts
        id: package
        run: |
          BUILD_DIR="build/"
          if [ "${{ matrix.platform }}" == "android" ]; then
            BUILD_DIR="build/app/outputs/flutter-apk/"
          elif [ "${{ matrix.platform }}" == "ios" ]; then
            BUILD_DIR="build/ios/iphoneos/"
          fi
          echo "build-dir=${BUILD_DIR}" >> $GITHUB_OUTPUT

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build-${{ needs.setup.outputs.repo-slug }}-${{ github.sha }}
          path: ${{ steps.package.outputs.build-dir }}
          if-no-files-found: warn
          compression-level: 6
          retention-days: 30

  # Quality Gate - Check if all jobs passed
  quality-gate:
    name: Quality Gate
    if: always()
    needs: [setup, build-web, build-native] # Removed analyze, security, test dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Check Job Status
        run: |
          echo "Job Status Summary:"
          echo "Setup: ${{ needs.setup.result }}"
          echo "Build Web: ${{ needs.build-web.result }}"
          echo "Build Native: ${{ needs.build-native.result }}"

          if [[ 
            "${{ needs.setup.result }}" == "success" &&
            ("${{ needs.build-web.result }}" == "success" || "${{ needs.build-web.result }}" == "skipped") &&
            ("${{ needs.build-native.result }}" == "success" || "${{ needs.build-native.result }}" == "skipped")
          ]]; then
            echo "All quality gates passed"
            exit 0
          else
            echo "Quality gate failed - check individual job results"
            exit 1
          fi
